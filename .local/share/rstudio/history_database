0:dat_fig2[2*i-1, ]<-pd_fig2[i, ]
0:}
0:dat_fig2<-dat_fig2[nrow(dat_fig2):1, ]
0:dat_fig2[is.na(dat_fig2)]<-"REF."
0:pr_fig3<-t(matrix(fig3$`PR (95% CI)`, nrow=4))
0:pd_fig3<-t(matrix(fig3$`PD (95% CI)`, nrow=4))
0:dat_fig3<-matrix(NA, nrow=2*nrow(pr_fig3), ncol=4)
0:for (i in 1:nrow(pr_fig3)) {
0:dat_fig3[2*i, ]<-pr_fig3[i, ]
0:dat_fig3[2*i-1, ]<-pd_fig3[i, ]
0:}
0:dat_fig3<-dat_fig3[nrow(dat_fig3):1, ]
0:dat_fig3[is.na(dat_fig3)]<-"REF."
0:write.csv(dat_fig2, file="table2_fig2.csv", row.names=F)
0:write.csv(dat_fig3, file="table2_fig3.csv", row.names=F)
0:pr_fig2
0:pd_fig2
0:dat_fig2<-matrix(NA, nrow=2*nrow(pr_fig2), ncol=4)
0:for (i in 1:nrow(pr_fig2)) {
0:dat_fig2[2*i, ]<-pr_fig2[i, ]
0:dat_fig2[2*i-1, ]<-pd_fig2[i, ]
0:}
0:dat_fig2
0:dat_fig2<-dat_fig2[nrow(dat_fig2):1, ]
0:dat_fig2
0:dat_fig2<-matrix(NA, nrow=2*nrow(pr_fig2), ncol=4)
0:dat_fig2
0:for (i in 1:nrow(pr_fig2)) {
0:dat_fig2[2*i, ]<-pr_fig2[i, ]
0:dat_fig2[2*i-1, ]<-pd_fig2[i, ]
0:}
0:dat_fig2
0:dat_fig2<-matrix(NA, nrow=2*nrow(pr_fig2), ncol=4)
0:for (i in 1:nrow(pr_fig2)) {
0:dat_fig2[2*i-1, ]<-pr_fig2[i, ]
0:dat_fig2[2*i, ]<-pd_fig2[i, ]
0:}
0:dat_fig2
0:#Table 2
0:setwd("/Users/ningzhang/Desktop/UNC/research/SIS")
0:library(readxl)
0:table2<-read_excel("SIS_prevalence_diff.xlsx", sheet="new Table 2")
0:fig1<-table2[1:16, ]
0:fig2<-table2[18:89, ]
0:fig3<-table2[91:118, ]
0:pr_fig1<-t(matrix(fig1$`PR (95% CI)`, nrow=4))
0:pd_fig1<-t(matrix(fig1$`PD (95% CI)`, nrow=4))
0:dat_fig1<-matrix(NA, nrow=2*nrow(pr_fig1), ncol=4)
0:for (i in 1:nrow(pr_fig1)) {
0:dat_fig1[2*i-1, ]<-pr_fig1[i, ]
0:dat_fig1[2*i, ]<-pd_fig1[i, ]
0:}
0:# dat_fig1<-dat_fig1[nrow(dat_fig1):1, ]
0:dat_fig1[is.na(dat_fig1)]<-"REF."
0:pr_fig2<-t(matrix(fig2$`PR (95% CI)`, nrow=4))
0:pd_fig2<-t(matrix(fig2$`PD (95% CI)`, nrow=4))
0:dat_fig2<-matrix(NA, nrow=2*nrow(pr_fig2), ncol=4)
0:for (i in 1:nrow(pr_fig2)) {
0:dat_fig2[2*i-1, ]<-pr_fig2[i, ]
0:dat_fig2[2*i, ]<-pd_fig2[i, ]
0:}
0:# dat_fig2<-dat_fig2[nrow(dat_fig2):1, ]
0:dat_fig2[is.na(dat_fig2)]<-"REF."
0:pr_fig3<-t(matrix(fig3$`PR (95% CI)`, nrow=4))
0:pd_fig3<-t(matrix(fig3$`PD (95% CI)`, nrow=4))
0:dat_fig3<-matrix(NA, nrow=2*nrow(pr_fig3), ncol=4)
0:for (i in 1:nrow(pr_fig3)) {
0:dat_fig3[2*i-1, ]<-pr_fig3[i, ]
0:dat_fig3[2*i, ]<-pd_fig3[i, ]
0:}
0:# dat_fig3<-dat_fig3[nrow(dat_fig3):1, ]
0:dat_fig3[is.na(dat_fig3)]<-"REF."
0:dat_fig1
0:pr_fig2<-t(matrix(fig2$`PR (95% CI)`, nrow=4))
0:pd_fig2<-t(matrix(fig2$`PD (95% CI)`, nrow=4))
0:dat_fig2<-matrix(NA, nrow=2*nrow(pr_fig2), ncol=4)
0:for (i in 1:nrow(pr_fig2)) {
0:dat_fig2[2*i-1, ]<-pr_fig2[i, ]
0:dat_fig2[2*i, ]<-pd_fig2[i, ]
0:}
0:# dat_fig2<-dat_fig2[nrow(dat_fig2):1, ]
0:dat_fig2[is.na(dat_fig2)]<-"REF."
0:write.csv(dat_fig2, file="table2_fig2.csv", row.names=F)
0:write.csv(dat_fig1, file="table2_fig1.csv", row.names=F)
0:dat_fig2
0:write.csv(dat_fig3, file="table2_fig3.csv", row.names=F)
0:?CVTuningCov
0:71.73/91.73
0:#Overall Regression Data
0:setwd("/Users/ningzhang/Desktop/UNC/research/covid/COVID19_Impacts")
0:library(tidyverse)
0:library(covidcast)
0:library(ranger)
0:library(lubridate)
0:library(gtsummary)
0:#Data sources----
0:#Age distribution
0:age_dat<-read_csv("data/usa_population_age_county.csv")%>%
0:mutate(age_prop=age_prop*100)%>%
0:dplyr::select(fips, age_groups, age_prop)%>%
0:pivot_wider(names_from=age_groups, values_from = age_prop)
0:#County level demographics
0:cnty_cov_dat<-read_csv("data/county_dat.csv")
0:#COVID death
0:covid_dat<-arrow::read_parquet("data/nyt_reported_covid19_june23.parquet")%>%
0:filter(target=="deaths_cum", level=="county")%>%
0:mutate(deaths_per_100k=value/population*100000)%>%
0:group_by(fips, county, state, population, abbreviation)%>%
0:summarize(deaths_per_100k=max(deaths_per_100k))%>%
0:ungroup()%>%
0:filter(deaths_per_100k>0)
0:head(age)
0:head(age_dat)
0:head(cnty_cov_dat)
0:head(covid_dat)
0:#Bring death and age distributions together
0:covid_dat_all<-covid_dat %>%
0:inner_join(cnty_cov_dat) %>%
0:inner_join(age_dat)
0:covid_dat_all<-covid_dat_all[complete.cases(covid_dat_all),]
0:#Merge datasets
0:covid_dat_all<-covid_dat %>%
0:inner_join(cnty_cov_dat) %>%
0:inner_join(age_dat)
0:covid_dat_all<-covid_dat_all[complete.cases(covid_dat_all),]
0:colnames(covid_dat_all)
0:setwd("/Users/ningzhang/Desktop/UNC/course/2024fall/bios611/project")
0:#Data sources----
0:#Age distribution
0:age_dat<-read_csv("data/usa_population_age_county.csv")%>%
0:mutate(age_prop=age_prop*100)%>%
0:dplyr::select(fips, age_groups, age_prop)%>%
0:pivot_wider(names_from=age_groups, values_from = age_prop)
0:#County level demographics
0:cnty_cov_dat<-read_csv("data/county_dat.csv")
0:setwd("/Users/ningzhang/Desktop/UNC/course/2024fall/bios611/project")
0:#Data sources----
0:#Age distribution
0:age_dat<-read_csv("orgdata/usa_population_age_county.csv")%>%
0:mutate(age_prop=age_prop*100)%>%
0:dplyr::select(fips, age_groups, age_prop)%>%
0:pivot_wider(names_from=age_groups, values_from = age_prop)
0:#County level demographics
0:cnty_cov_dat<-read_csv("orgdata/county_dat.csv")
0:#COVID death
0:covid_dat<-arrow::read_parquet("orgdata/nyt_reported_covid19_june23.parquet")%>%
0:filter(target=="deaths_cum", level=="county")%>%
0:mutate(deaths_per_100k=value/population*100000)%>%
0:group_by(fips, county, state, population, abbreviation)%>%
0:summarize(deaths_per_100k=max(deaths_per_100k))%>%
0:ungroup()%>%
0:filter(deaths_per_100k>0)
0:#Merge datasets
0:covid_dat_all<-covid_dat %>%
0:inner_join(cnty_cov_dat) %>%
0:inner_join(age_dat)
0:covid_dat_all<-covid_dat_all[complete.cases(covid_dat_all),]
0:write.csv(covid_dat_all, "derv_data/covid_data_all.csv", row.names=F)
0:#Descriptive stats----
0:colnames(covid_dat_all)
0:#Descriptive stats----
0:head(covid_dat_all)
0:colnames(covid_dat_all)
0:covid_dat_all<-read_csv("derv_data/covid_data_all.csv")
0:??get_acs
0:15^2*pi
0:15^2*pi*30
0:152/9*15
0:#Q1
0:#k-means: data frame with n rows
0:my_kmeans<-function(data, k){
0:cluster_labels<-sample(1:k, nrow(data), replace=T) # we guess randomly the nth row goes into cluster k
0:data_mat<-data %>%
0:as.matrix()
0:#calculate the centroids
0:centroids<-c()
0:for (i in 1:k) {
0:submat<-data_mat[i==cluster_labels,]
0:centroid<-colMeans(submat)
0:centroids<-rbind(centroids, centroid)
0:}
0:iteration<-0
0:old_centroids<-centroids
0:while (T) {
0:iteration<-iteration+1
0:# old_centroids<-centroids
0:for (i in 1:nrow(data_mat)) {
0:row<-data_mat[i,]
0:min_d<-Inf
0:min_j<-0
0:for (j in 1:k) {
0:d<-sqrt(sum((row-centroids[j,])*(row-centroids[j,])))
0:# cat(sprintf("d between %d %d is %f\n", i, j, d))
0:if(d<min_d){
0:min_d<-d
0:min_j<-j}
0:}
0:cluster_labels[i]<-min_j
0:}
0:old_centroids<-centroids
0:centroids<-c()
0:for (i in 1:k) {
0:submat<-data_mat[i==cluster_labels,]
0:centroid<-colMeans(submat)
0:centroids<-rbind(centroids, centroid)
0:}
0:centroid_diff<-old_centroids-centroids
0:centroids_distances<-mean(rowSums(centroid_diff * centroid_diff))
0:cat(sprintf("Iteration %d centroid differences %f.\n", iteration, centroids_distances))
0:if(centroids_distances<1e-6){
0:break
0:}
0:}
0:return(cluster_labels)
0:}
0:#Q2
0:library(tibble)
0:set.seed(123)
0:n<-100
0:data_1<-tibble(
0:dist1 = rnorm(n, mean = 5, sd = 1),
0:dist2 = rnorm(n, mean = 0, sd = 1),
0:dist3 = rnorm(n, mean = 0, sd = 1),
0:dist4 = rnorm(n, mean = 0, sd = 1),
0:dist5 = rnorm(n, mean = 0, sd = 1)
0:)
0:data_2<-tibble(
0:dist1 = rnorm(n, mean = -5, sd = 1),
0:dist2 = rnorm(n, mean = 0, sd = 1),
0:dist3 = rnorm(n, mean = 0, sd = 1),
0:dist4 = rnorm(n, mean = 0, sd = 1),
0:dist5 = rnorm(n, mean = 0, sd = 1)
0:)
0:data_3<-tibble(
0:dist1 = rnorm(n, mean = 0, sd = 1),
0:dist2 = rnorm(n, mean = 0, sd = 1),
0:dist3 = rnorm(n, mean = 0, sd = 1),
0:dist4 = rnorm(n, mean = 3, sd = 1),
0:dist5 = rnorm(n, mean = 0, sd = 1)
0:)
0:data_4<-tibble(
0:dist1 = rnorm(n, mean = 0, sd = 1),
0:dist2 = rnorm(n, mean = 0, sd = 1),
0:dist3 = rnorm(n, mean = 0, sd = 1),
0:dist4 = rnorm(n, mean = -2, sd = 1),
0:dist5 = rnorm(n, mean = 0, sd = 1)
0:)
0:data_5<-tibble(
0:dist1 = rnorm(n, mean = 4, sd = 1),
0:dist2 = rnorm(n, mean = 0, sd = 1),
0:dist3 = rnorm(n, mean = 0, sd = 1),
0:dist4 = rnorm(n, mean = -3, sd = 1),
0:dist5 = rnorm(n, mean = 0, sd = 1)
0:)
0:data_q2<-rbind(data_1, data_2, data_3, data_4, data_5)
0:my_kmeans(data_q2, 5)
0:gen_data<-function(r){
0:data_1<-tibble(
0:dist1 = rnorm(n, mean = r*5, sd = 1),
0:dist2 = rnorm(n, mean = 0, sd = 1),
0:dist3 = rnorm(n, mean = 0, sd = 1),
0:dist4 = rnorm(n, mean = 0, sd = 1),
0:dist5 = rnorm(n, mean = 0, sd = 1)
0:)
0:data_2<-tibble(
0:dist1 = rnorm(n, mean = -5*r, sd = 1),
0:dist2 = rnorm(n, mean = 0, sd = 1),
0:dist3 = rnorm(n, mean = 0, sd = 1),
0:dist4 = rnorm(n, mean = 0, sd = 1),
0:dist5 = rnorm(n, mean = 0, sd = 1)
0:)
0:data_3<-tibble(
0:dist1 = rnorm(n, mean = 0, sd = 1),
0:dist2 = rnorm(n, mean = 0, sd = 1),
0:dist3 = rnorm(n, mean = 0, sd = 1),
0:dist4 = rnorm(n, mean = 3*r, sd = 1),
0:dist5 = rnorm(n, mean = 0, sd = 1)
0:)
0:data_4<-tibble(
0:dist1 = rnorm(n, mean = 0, sd = 1),
0:dist2 = rnorm(n, mean = 0, sd = 1),
0:dist3 = rnorm(n, mean = 0, sd = 1),
0:dist4 = rnorm(n, mean = -2*r, sd = 1),
0:dist5 = rnorm(n, mean = 0, sd = 1)
0:)
0:data_5<-tibble(
0:dist1 = rnorm(n, mean = 4*r, sd = 1),
0:dist2 = rnorm(n, mean = 0, sd = 1),
0:dist3 = rnorm(n, mean = 0, sd = 1),
0:dist4 = rnorm(n, mean = -3*r, sd = 1),
0:dist5 = rnorm(n, mean = 0, sd = 1)
0:)
0:data_q5<-rbind(data_1, data_2, data_3, data_4, data_5)
0:return(data_q5)
0:}
0:data_q5<-gen_data(r=0.1)
0:#we would always get 5 clusters but the labels should be messy
0:my_kmeans(gen_data(r=0.1), k=5)
0:#we would always get 5 clusters but the labels should be messy
0:my_kmeans(gen_data(r=1), k=5)
0:#we would always get 5 clusters but the labels should be messy
0:my_kmeans(gen_data(r=0.2), k=5)
0:#we would always get 5 clusters but the labels should be messy
0:my_kmeans(gen_data(r=0.2), k=5)
0:synth<-function(r, n_per=100){
0:means <- list(
0:r * c(5, 0, 0, 0, 0),
0:r * c(-5, 0, 0, 0, 0),
0:r * c(0, 0, 0, 3, 0),
0:r * c(0, 0, 0, -2, 0),
0:r * c(4, 0, 0, -3, 0))
0:d<-tibble(X1=c(), X2=c(), X3=c(), X4=c(), X5=c())
0:for (m in 1:means) {
0:sd<-tibble(X1=rnorm(n_per, m[1]),
0:X2=rnorm(n_per, m[2]),
0:X3=rnorm(n_per, m[3]),
0:X4=rnorm(n_per, m[4]),
0:X5=rnorm(n_per, m[5]))
0:d<-rbind(d, sd)
0:}
0:d
0:}
0:synth(1)
0:synth<-function(r, n_per=100){
0:means <- list(
0:r * c(5, 0, 0, 0, 0),
0:r * c(-5, 0, 0, 0, 0),
0:r * c(0, 0, 0, 3, 0),
0:r * c(0, 0, 0, -2, 0),
0:r * c(4, 0, 0, -3, 0))
0:d<-tibble(X1=c(), X2=c(), X3=c(), X4=c(), X5=c())
0:for (m in means) {
0:sd<-tibble(X1=rnorm(n_per, m[1]),
0:X2=rnorm(n_per, m[2]),
0:X3=rnorm(n_per, m[3]),
0:X4=rnorm(n_per, m[4]),
0:X5=rnorm(n_per, m[5]))
0:d<-rbind(d, sd)
0:}
0:d
0:}
0:synth(1)
0:seq(0, 3, length.out=10)
0:?clusGap
0:for (r in seq(0, 3, length.out=3)) {
0:data_set<-synth(r)
0:results<-clusGap(data_set, kmeans, 10)
0:print(result)
0:}
0:for (r in seq(0, 3, length.out=3)) {
0:data_set<-synth(r)
0:results<-clusGap(data_set, kmeans, 10)
0:print(results)
0:}
0:results
0:results$n
0:results$Tab
0:plot(results)
0:optimal_k <- which.max(results$Tab[, "gap"])
0:optimal_k
0:which.max(results$Tab[, "gap"])
0:optimal_k <- which.max(results$Tab[, "gap"])
0:cat("Optimal number of clusters:", optimal_k, "\n")
0:print(results, method="Tibs2001SEmax")
0:print(results, method="Tibs2001SEmax")
0:print(results)
0:print(results, method="Tibs2001SEmax")
0:names(print(results, method="Tibs2001SEmax"))
0:results$Tab
0:which.max(results$Tab[, "gap"])
0:results$Tab[, "gap"]
0:?>maxSE
0:for (r in seq(0, 3, length.out=3)) {
0:data_set<-synth(r)
0:results<-clusGap(data_set, kmeans, 10)
0:print(results)
0:nc<-maxSE(
0:results$Tab[, "gap"],
0:results$Tab[, "SE.sim"],
0:method="Tibs2001SEmax",
0:SE.factor=1)
0:print(nc)
0:}
0:rs<-c()
0:ncs<-c()
0:for (r in seq(0, 3, length.out=3)) {
0:data_set<-synth(r)
0:results<-clusGap(data_set, kmeans, 10)
0:nc<-maxSE(
0:results$Tab[, "gap"],
0:results$Tab[, "SE.sim"],
0:method="Tibs2001SEmax",
0:SE.factor=1)
0:rs<-c(rs, r)
0:ncs<-c(ncs, nc)
0:}
0:rs<-c()
0:ncs<-c()
0:for (r in seq(0, 3, length.out=3)) {
0:data_set<-synth(r)
0:results<-clusGap(data_set, kmeans, 10)
0:nc<-maxSE(
0:results$Tab[, "gap"],
0:results$Tab[, "SE.sim"],
0:method="Tibs2001SEmax",
0:SE.factor=1)
0:rs<-c(rs, r)
0:ncs<-c(ncs, nc)
0:}
0:ncs_df<-tibble(r=rs, nc=ncs)
0:ncs_df
0:rs<-c()
0:ncs<-c()
0:for (r in seq(0, 5, length.out=10)) {
0:data_set<-synth(r)
0:results<-clusGap(data_set, kmeans, 10)
0:nc<-maxSE(
0:results$Tab[, "gap"],
0:results$Tab[, "SE.sim"],
0:method="Tibs2001SEmax",
0:SE.factor=1)
0:rs<-c(rs, r)
0:ncs<-c(ncs, nc)
0:}
0:ncs_df<-tibble(r=rs, nc=ncs)
0:ncs_df
0:synth<-function(r, n_per=1000){
0:means <- list(
0:r * c(5, 0, 0, 0, 0),
0:r * c(-5, 0, 0, 0, 0),
0:r * c(0, 0, 0, 3, 0),
0:r * c(0, 0, 0, -2, 0),
0:r * c(4, 0, 0, -3, 0))
0:d<-tibble(X1=c(), X2=c(), X3=c(), X4=c(), X5=c())
0:for (m in means) {
0:sd<-tibble(X1=rnorm(n_per, m[1]),
0:X2=rnorm(n_per, m[2]),
0:X3=rnorm(n_per, m[3]),
0:X4=rnorm(n_per, m[4]),
0:X5=rnorm(n_per, m[5]))
0:d<-rbind(d, sd)
0:}
0:d
0:}
0:synth(1)
0:rs<-c()
0:ncs<-c()
0:for (r in seq(0, 5, length.out=10)) {
0:data_set<-synth(r)
0:results<-clusGap(data_set, kmeans, 10)
0:nc<-maxSE(
0:results$Tab[, "gap"],
0:results$Tab[, "SE.sim"],
0:method="Tibs2001SEmax",
0:SE.factor=1)
0:rs<-c(rs, r)
0:ncs<-c(ncs, nc)
0:}
0:synth<-function(r, n_per=200){
0:means <- list(
0:r * c(5, 0, 0, 0, 0),
0:r * c(-5, 0, 0, 0, 0),
0:r * c(0, 0, 0, 3, 0),
0:r * c(0, 0, 0, -2, 0),
0:r * c(4, 0, 0, -3, 0))
0:d<-tibble(X1=c(), X2=c(), X3=c(), X4=c(), X5=c())
0:for (m in means) {
0:sd<-tibble(X1=rnorm(n_per, m[1]),
0:X2=rnorm(n_per, m[2]),
0:X3=rnorm(n_per, m[3]),
0:X4=rnorm(n_per, m[4]),
0:X5=rnorm(n_per, m[5]))
0:d<-rbind(d, sd)
0:}
0:d
0:}
0:synth(1)
0:rs<-c()
0:ncs<-c()
0:for (r in seq(0, 3, length.out=10)) {
0:data_set<-synth(r)
0:results<-clusGap(data_set, kmeans, 10)
0:nc<-maxSE(
0:results$Tab[, "gap"],
0:results$Tab[, "SE.sim"],
0:method="Tibs2001SEmax",
0:SE.factor=1)
0:rs<-c(rs, r)
0:ncs<-c(ncs, nc)
0:}
0:ncs_df<-tibble(r=rs, nc=ncs)
0:ncs_df
0:138/3141
0:12/3141
0:101/2990
0:2725/3141
0:24.99/101/12
0:11.99/540
0:1/213
0:21.99/12/242
0:18.99/12/242
0:18.99*0.8/12/242
0:18.99*0.8/12/
0:363
0:16.99*0.8/242/12
0:11.99*0.8/6/363
0:363*12
0:242*16
0:28*2.54
0:60/2.54
0:reticulate::repl_python()
0:reticulate::repl_python()
1733618313474:make report.html
